// SPDX-License-Identifier: MIT
/*
1. Minting new tokens: The platform should be able to create new tokens and distribute them to players as rewards. Only the owner can mint tokens.
2. Transferring tokens: Players should be able to transfer their tokens to others.
3. Redeeming tokens: Players should be able to redeem their tokens for items in the in-game store.
4. Checking token balance: Players should be able to check their token balance at any time.
5. Burning tokens: Anyone should be able to burn tokens, that they own, that are no longer needed.
*/
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenToken is ERC20, Ownable {

    struct Item {
        string name;
        uint256 price;
    }

    mapping(uint256 => Item) public shopItems;

    event TokenMinted(address indexed to, uint256 amount);
    event TokenBurned(address indexed from, uint256 amount);
    event ItemRedeemed(address indexed user, uint256 itemId, uint256 price);

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        shopItems[1] = Item("Degen Shoes", 80);
        shopItems[2] = Item("Degen Slides", 60);
        shopItems[3] = Item("Degen Plushie Toy", 40);
        shopItems[4] = Item("Degen Keychain", 20);
    }

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
        emit TokenMinted(to, amount);
    }

    function redeem(uint256 itemId) external {
        Item memory item = shopItems[itemId];
        require(item.price > 0, "Item not available.");
        require(balanceOf(msg.sender) >= item.price, "Insufficient balance to redeem.");
        _transfer(msg.sender, owner(), item.price);
        emit ItemRedeemed(msg.sender, itemId, item.price);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
        emit TokenBurned(msg.sender, amount);
    }

    function getBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function showShopItems() external view returns (string memory) {
        return string(
            abi.encodePacked(
                "The items on sale: ",
                "{1} ", shopItems[1].name, " (", uint2str(shopItems[1].price), ") ",
                "{2} ", shopItems[2].name, " (", uint2str(shopItems[2].price), ") ",
                "{3} ", shopItems[3].name, " (", uint2str(shopItems[3].price), ") ",
                "{4} ", shopItems[4].name, " (", uint2str(shopItems[4].price), ")"
            )
        );
    }

    function decimals() public view virtual override returns (uint8) {
        return 0;
    }

    function uint2str(uint256 _i) internal pure returns (string memory) {
        if (_i == 0) {
            return "0";
        }
        uint256 j = _i;
        uint256 length;
        while (j != 0) {
            length++;
            j /= 10;
        }
        bytes memory bstr = new bytes(length);
        uint256 k = length;
        while (_i != 0) {
            k = k - 1;
            uint8 temp = (48 + uint8(_i - _i / 10 * 10));
            bytes1 b1 = bytes1(temp);
            bstr[k] = b1;
            _i /= 10;
        }
        return string(bstr);
    }
}
