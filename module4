// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


contract Degen is ERC20, Ownable {
    
    struct StoreItem {
        uint256 itemId; 
        string name;    
        uint256 price;  
    }
    
    mapping(uint256 => StoreItem) public storeItems;
    mapping(address => uint256[]) public playerItems; 
    mapping(address => mapping(uint256 => bool)) public hasRedeemedItem; 
    mapping(address => uint256) public lastRedemptionTime; 
    uint256 public nextItemId = 1;
    uint256 public cooldownPeriod = 1 days; 

    
    event ItemRedeemed(address indexed player, uint256 itemId, string itemName, uint256 itemPrice);
    
    event ItemPurchased(address indexed player, uint256 itemId, string itemName, uint256 itemPrice);

    
    constructor(address initialOwner) ERC20("Degen", "DGN") Ownable(initialOwner) {
        _mint(msg.sender, 0 * (10 ** uint256(decimals())));

        addItemToStore("Bag", 300); 
        addItemToStore("Shirt", 275);
        addItemToStore("Foods", 250); 
        addItemToStore("Flipflops", 225); 
        addItemToStore("Plush&Keychain", 200); 
    }
    
    function addItemToStore(string memory name, uint256 price) public onlyOwner {
        storeItems[nextItemId] = StoreItem(nextItemId, name, price);
        nextItemId++;
    }
    
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }
   
    function transfer(address to, uint256 amount) public override returns (bool) {
        return ERC20.transfer(to, amount);
    }
    
    function redeem(uint256 itemId) public {
        require(itemId > 0 && itemId < nextItemId, "Invalid item ID");
        require(balanceOf(msg.sender) >= storeItems[itemId].price, "Insufficient balance");
        require(!hasRedeemedItem[msg.sender][itemId], "Item already redeemed");
        require(block.timestamp >= lastRedemptionTime[msg.sender] + cooldownPeriod, "Redemption cooldown in effect");

        _burn(msg.sender, storeItems[itemId].price);

        
        playerItems[msg.sender].push(itemId);
        hasRedeemedItem[msg.sender][itemId] = true;
        lastRedemptionTime[msg.sender] = block.timestamp;

        emit ItemRedeemed(msg.sender, itemId, storeItems[itemId].name, storeItems[itemId].price);
    }
    
    function buyItemFromStore(uint256 itemId) public {
        require(itemId > 0 && itemId < nextItemId, "Invalid item ID");
        require(balanceOf(msg.sender) >= storeItems[itemId].price, "Insufficient balance");

        
        _transfer(msg.sender, owner(), storeItems[itemId].price);

        
        emit ItemPurchased(msg.sender, itemId, storeItems[itemId].name, storeItems[itemId].price);
    }
   
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }
    
    function balanceOf(address account) public view override returns (uint256) {
        return ERC20.balanceOf(account);
    }

    
    function getPlayerItems(address player) public view returns (uint256[] memory) {
        return playerItems[player];
    }

    
    function setCooldownPeriod(uint256 _cooldownPeriod) public onlyOwner {
        cooldownPeriod = _cooldownPeriod;
    }
}
